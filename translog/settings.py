"""
Django settings for translog project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_#f!38&oq503u+kr5@ld3m)8x0$-=qmvvttb2pcox5787g2s-z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'crispy_forms',
    'crispy_bootstrap5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'translog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'translog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirecionamento de login e logout

LOGIN_REDIRECT_URL = 'dashboard'

LOGOUT_REDIRECT_URL = 'home'

# Django Crisp Forms

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Message Tags

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',  # (A MÁGICA ESTÁ AQUI)
}

# Configuração dos Loggings

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # mantém os loggers padrão do Django
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} [{name}] {pathname}:{lineno:d} {message}',  # Adicionei caminho e linha
            'style': '{',
        },
        'simple': {
            'format': '{levelname} [{name}] {message}',  # Adicionei o nome do logger
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',  # Formato simples para o console
        },
        'file': {
            'class': 'logging.FileHandler',
            # Garante que o ficheiro de log fique na raiz do projeto
            'filename': os.path.join(BASE_DIR, 'django.log'), 
            'formatter': 'verbose',  # Formato detalhado para o ficheiro
        },
    },
    'loggers': {
        # Logger padrão do Django (ex: requisições HTTP)
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',  # Mostra INFO, WARNING, ERROR, CRITICAL
            'propagate': True,  # Permite que o logger 'root' também capture
        },
        # Logger específico para a NOSSA aplicação 'core'
        'core': { # <-- ALTERADO DE 'meu_app' PARA 'core'
            'handlers': ['console', 'file'],
            'level': 'INFO',  # Mostra INFO e acima gerados pelo nosso app
                              # Mude para 'DEBUG' se precisar de mais detalhes
            'propagate': False,  # Impede que a mensagem apareça duas vezes
        },
    },
    # (Opcional) Logger Raiz - captura tudo o que não foi capturado acima
    # 'root': {
    #     'handlers': ['console'],
    #     'level': 'WARNING', # Por defeito, mostra apenas WARNING e acima
    # },
}
